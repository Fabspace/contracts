// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// WalletCacheABI is the input ABI used to generate the binding from.
const WalletCacheABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ens_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultDailyLimit_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_controllerNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_licenceNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenWhitelistNode_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_walletDeployerNode_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractWallet\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"CachedWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cacheWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cachedWallets\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cachedWalletsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"licenceNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWhitelistNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletCachePop\",\"outputs\":[{\"internalType\":\"contractWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletDeployerNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// WalletCacheBin is the compiled bytecode used for deploying new contracts.
var WalletCacheBin = "0x60806040527f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976001557fd0ff8bd67f6e25e4e4b010df582a36a0ee9b78e49afe6cc1cff5dd5a830403306002557fe84f90570f13fe09f288f2411ff9cf50da611ed0c7db7f73d48053ffc974d3966003557f1d0c0adbe6addd93659446311e0767a56b67d41ef38f0cb66dcf7560d28a5a386004553480156100a057600080fd5b50604051615061380380615061833981810160405260c08110156100c357600080fd5b508051602082015160408301516060840151608085015160a090950151600080546001600160a01b0319166001600160a01b03871617905593949293919290918380156101105760018190555b50600680546001600160a01b0319166001600160a01b0388161790556007859055821561013d5760028390555b81156101495760038290555b80156101555760048190555b505050505050614ef78061016a6000396000f3fe60806040523480156200001157600080fd5b5060043610620000b85760003560e01c8063877337b0116200007b578063877337b0146200011f57806387e8bed11462000129578063a4570e511462000133578063c76b0888146200013d578063e2b4ce971462000147578063fc6cabe7146200015157620000b8565b80633f15457f14620000bd57806360dbc5de14620000e357806371b9076a14620000ef578063747c31d6146200010b5780637d73b2311462000115575b600080fd5b620000c762000171565b604080516001600160a01b039092168252519081900360200190f35b620000ed62000180565b005b620000f9620002b1565b60408051918252519081900360200190f35b620000f9620002b7565b620000c7620002bd565b620000f9620002cc565b620000f9620002d2565b620000c7620002d8565b620000f9620003c7565b620000f9620003cd565b620000c7600480360360208110156200016957600080fd5b5035620003d3565b6006546001600160a01b031681565b60006200018f600454620003fb565b6006546003546001916001600160a01b031690620001ac620003cd565b600254600454600754604051620001c390620004f5565b6001600160a01b0398891681529615156020880152949096166040808701919091526060860193909352608085019190915260a084015260c083019390935260e082015290519081900361010001906000f08015801562000228573d6000803e3d6000fd5b50600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0383166001600160a01b0319909116811790915560408051918252519192507f9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e919081900360200190a150565b60055490565b60025481565b6000546001600160a01b031690565b60035481565b60045481565b6000620002e7600454620003fb565b6001600160a01b0316336001600160a01b0316146200034d576040805162461bcd60e51b815260206004820152601d60248201527f6e6f742063616c6c65642062792077616c6c65742d6465706c6f796572000000604482015290519081900360640190fd5b6005546001111562000363576200036362000180565b600580546000919060001981019081106200037a57fe5b600091825260209091200154600580546001600160a01b0390921692509080620003a057fe5b600082815260209020810160001990810180546001600160a01b0319169055019055905090565b60075481565b60015490565b60058181548110620003e157fe5b6000918252602090912001546001600160a01b0316905081565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156200044957600080fd5b505afa1580156200045e573d6000803e3d6000fd5b505050506040513d60208110156200047557600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b158015620004c157600080fd5b505afa158015620004d6573d6000803e3d6000fd5b505050506040513d6020811015620004ed57600080fd5b505192915050565b6149be80620005048339019056fe60806040527f23349faba58c4a8622c88e7d3ba4a01da2f0764900bfb876898ac21e573273c96001557f7f2ce995617d2816b426c5c8698c5ec2952f7a34bb10f38326f74933d58936976002553480156200005957600080fd5b50604051620049be380380620049be83398181016040526101008110156200008057600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151600080546001600160a01b0319166001600160a01b0387161790559596949593949293919290918085808a8a88878015620000e25760018190555b508015620000f05760028190555b50600380546001600160a01b0319166001600160a01b0384161760ff60a01b1916600160a01b8315158102919091179182905560ff9104166200016a57604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b60408051600081526001600160a01b038416602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a150506003805460ff60b01b1916600160b01b1790556008556000620001db6001600160e01b03620002ae16565b5050505050915050600081116200022e576040805162461bcd60e51b815260206004820152601260248201527114dd18589b1958dbda5b881b9bdd081cd95d60721b604482015290519081900360640190fd5b808302600a819055600981905562000256426201518062000430602090811b62003afc17901c565b600c81905560408051838152602081019290925280517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca9281900390910190a1505050600f93909355506200058c9650505050505050565b6060600080600080600080620002cc6008546200049260201b60201c565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156200030557600080fd5b505afa1580156200031a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e08110156200034457600080fd5b81019080805160405193929190846401000000008211156200036557600080fd5b9083019060208201858111156200037b57600080fd5b82516401000000008111828201881017156200039657600080fd5b82525081516020918201929091019080838360005b83811015620003c5578181015183820152602001620003ab565b50505050905090810190601f168015620003f35780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b6000828201838110156200048b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b158015620004e057600080fd5b505afa158015620004f5573d6000803e3d6000fd5b505050506040513d60208110156200050c57600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b1580156200055857600080fd5b505afa1580156200056d573d6000803e3d6000fd5b505050506040513d60208110156200058457600080fd5b505192915050565b614422806200059c6000396000f3fe6080604052600436106102135760003560e01c80637b580e7511610118578063b242e534116100a0578063ced99cce1161006f578063ced99cce14610ba0578063cf0a866b14610bb5578063d251fefc14610bca578063e2b4ce9714610bf4578063f36febda14610c0957610254565b8063b242e53414610a3b578063beabacc814610a76578063c1e559a314610ab9578063cccdc55614610b8b57610254565b806387e8bed1116100e757806387e8bed1146109bd5780638da5cb5b146109d257806390e690c7146109e7578063ad95580b146109fc578063b20d30a914610a1157610254565b80637b580e75146108e55780637d73b231146109185780637f6497831461092d578063877337b0146109a857610254565b80633f579f421161019b57806347d125af1161016a57806347d125af146107fa5780634d9aa2481461082b578063548db17414610840578063715018a6146108bb578063747c31d6146108d057610254565b80633f579f4214610647578063425c530a146106d757806345b12efc1461070157806346efe0ed1461072857610254565b80631c3ba70c116101e25780631c3ba70c1461048d57806320c13b0b146105085780632121dc75146105d357806332531c3c146105e85780633a43199f1461061b57610254565b806301ffc9a7146102595780631127b57e146102a15780631626ba7e1461032b5780631aa21fba1461040057610254565b36610254576040805133815234602082015281517f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874929181900390910190a1005b600080fd5b34801561026557600080fd5b5061028d6004803603602081101561027c57600080fd5b50356001600160e01b031916610c42565b604080519115158252519081900360200190f35b3480156102ad57600080fd5b506102b6610c5b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102f05781810151838201526020016102d8565b50505050905090810190601f16801561031d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033757600080fd5b506103e36004803603604081101561034e57600080fd5b81359190810190604081016020820135600160201b81111561036f57600080fd5b82018360208201111561038157600080fd5b803590602001918460018302840111600160201b831117156103a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610c7c945050505050565b604080516001600160e01b03199092168252519081900360200190f35b34801561040c57600080fd5b5061048b6004803603604081101561042357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561044d57600080fd5b82018360208201111561045f57600080fd5b803590602001918460208302840111600160201b8311171561048057600080fd5b509092509050610cea565b005b34801561049957600080fd5b5061048b600480360360208110156104b057600080fd5b810190602081018135600160201b8111156104ca57600080fd5b8201836020820111156104dc57600080fd5b803590602001918460208302840111600160201b831117156104fd57600080fd5b509092509050610e72565b34801561051457600080fd5b506103e36004803603604081101561052b57600080fd5b810190602081018135600160201b81111561054557600080fd5b82018360208201111561055757600080fd5b803590602001918460018302840111600160201b8311171561057857600080fd5b919390929091602081019035600160201b81111561059557600080fd5b8201836020820111156105a757600080fd5b803590602001918460018302840111600160201b831117156105c857600080fd5b509092509050610f7a565b3480156105df57600080fd5b5061028d61104f565b3480156105f457600080fd5b5061028d6004803603602081101561060b57600080fd5b50356001600160a01b0316611060565b61048b6004803603604081101561063157600080fd5b506001600160a01b038135169060200135611075565b34801561065357600080fd5b506102b66004803603606081101561066a57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561069957600080fd5b8201836020820111156106ab57600080fd5b803590602001918460018302840111600160201b831117156106cc57600080fd5b509092509050611314565b3480156106e357600080fd5b5061048b600480360360208110156106fa57600080fd5b50356113b0565b34801561070d57600080fd5b50610716611487565b60408051918252519081900360200190f35b34801561073457600080fd5b5061048b6004803603606081101561074b57600080fd5b81359190810190604081016020820135600160201b81111561076c57600080fd5b82018360208201111561077e57600080fd5b803590602001918460018302840111600160201b8311171561079f57600080fd5b919390929091602081019035600160201b8111156107bc57600080fd5b8201836020820111156107ce57600080fd5b803590602001918460018302840111600160201b831117156107ef57600080fd5b5090925090506114a5565b34801561080657600080fd5b5061080f61157a565b604080516001600160a01b039092168252519081900360200190f35b34801561083757600080fd5b50610716611589565b34801561084c57600080fd5b5061048b6004803603602081101561086357600080fd5b810190602081018135600160201b81111561087d57600080fd5b82018360208201111561088f57600080fd5b803590602001918460208302840111600160201b831117156108b057600080fd5b50909250905061158f565b3480156108c757600080fd5b5061048b611908565b3480156108dc57600080fd5b50610716611a03565b3480156108f157600080fd5b5061048b6004803603602081101561090857600080fd5b50356001600160a01b0316611a09565b34801561092457600080fd5b5061080f611bb3565b34801561093957600080fd5b5061048b6004803603602081101561095057600080fd5b810190602081018135600160201b81111561096a57600080fd5b82018360208201111561097c57600080fd5b803590602001918460208302840111600160201b8311171561099d57600080fd5b509092509050611bc2565b3480156109b457600080fd5b50610716611c86565b3480156109c957600080fd5b50610716611c8c565b3480156109de57600080fd5b5061080f611c92565b3480156109f357600080fd5b5061048b611ca1565b348015610a0857600080fd5b5061048b611cfb565b348015610a1d57600080fd5b5061048b60048036036020811015610a3457600080fd5b5035611e02565b348015610a4757600080fd5b5061048b60048036036040811015610a5e57600080fd5b506001600160a01b0381351690602001351515611e93565b348015610a8257600080fd5b5061048b60048036036060811015610a9957600080fd5b506001600160a01b03813581169160208101359091169060400135611f68565b348015610ac557600080fd5b5061048b60048036036060811015610adc57600080fd5b81359190810190604081016020820135600160201b811115610afd57600080fd5b820183602082011115610b0f57600080fd5b803590602001918460018302840111600160201b83111715610b3057600080fd5b919390929091602081019035600160201b811115610b4d57600080fd5b820183602082011115610b5f57600080fd5b803590602001918460018302840111600160201b83111715610b8057600080fd5b5090925090506120f5565b348015610b9757600080fd5b50610716612224565b348015610bac57600080fd5b5061028d61222a565b348015610bc157600080fd5b5061028d61223a565b348015610bd657600080fd5b5061080f60048036036020811015610bed57600080fd5b503561224a565b348015610c0057600080fd5b50610716612271565b348015610c1557600080fd5b5061071660048036036040811015610c2c57600080fd5b506001600160a01b038135169060200135612277565b6001600160e01b031981166301ffc9a760e01b14919050565b60405180604001604052806005815260200164332e312e3160d81b81525081565b600080610c8f848463ffffffff61240016565b9050610c9a816125e7565b610cd8576040805162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b604482015290519081900360640190fd5b50630b135d3f60e11b90505b92915050565b610cf3336125e7565b80610cfd57503330145b610d43576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b80610d8c576040805162461bcd60e51b8152602060048201526014602482015273617373657420617272617920697320656d70747960601b604482015290519081900360640190fd5b60005b81811015610def576000610dbe30858585818110610da957fe5b905060200201356001600160a01b03166125fb565b9050610de685858585818110610dd057fe5b905060200201356001600160a01b031683611f68565b50600101610d8f565b507fd4f62f23021706247dcffea245d104ae7ddaec7f23acf3d11d7136d5de6a69ad83838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b610e7d60015461269c565b6001600160a01b0316336001600160a01b031614610ed8576040805162461bcd60e51b815260206004820152601360248201527227b7363c903bb0b63632ba2232b83637bcb2b960691b604482015290519081900360640190fd5b60075460ff1615610f30576040805162461bcd60e51b815260206004820152601a60248201527f57686974656c69737420616c7265616479206d69677261746564000000000000604482015290519081900360640190fd5b6007805460ff191660011790556040805160208084028281018201909352838252610f769285918591829185019084908082843760009201919091525061279092505050565b5050565b6000808585604051602001808383808284376040805191909301818103601f190182528084528151602092830120601f8b01839004830282018301909452898152929650630b135d3f60e11b9550610ff19450869350899150889081908401838280828437600092019190915250610c7c92505050565b6001600160e01b0319161461103d576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b506320c13b0b60e01b95945050505050565b600354600160a01b900460ff165b90565b60056020526000908152604090205460ff1681565b61107e336125e7565b8061108857503330145b6110ce576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b6110d782612a87565b61111d576040805162461bcd60e51b8152602060048201526012602482015271746f6b656e206e6f74206c6f616461626c6560701b604482015290519081900360640190fd5b600354600160a81b900460ff1661114757600061113a8383612277565b905061114581612aa1565b505b6000611154600f5461269c565b90506001600160a01b038316156111fc5761117f6001600160a01b038416828463ffffffff612b6216565b806001600160a01b0316631b3c96b484846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156111df57600080fd5b505af11580156111f3573d6000803e3d6000fd5b505050506112cb565b81471015611251576040805162461bcd60e51b815260206004820152601c60248201527f4c6f61643a206e6f742073756666696369656e742062616c616e636500000000604482015290519081900360640190fd5b806001600160a01b0316631b3c96b48385856040518463ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001828152602001925050506000604051808303818588803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b50505050505b604080516001600160a01b03851681526020810184905281517f5f65674bec9af81f71be68674135a0ea3f163fb91984e3893d06da9f6ea2ce8a929181900390910190a1505050565b606061131f336125e7565b611366576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b6113a7858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c7a92505050565b50949350505050565b6113bb60015461269c565b6001600160a01b0316336001600160a01b031614611416576040805162461bcd60e51b815260206004820152601360248201527227b7363c903bb0b63632ba2232b83637bcb2b960691b604482015290519081900360640190fd5b600b5460ff161561146e576040805162461bcd60e51b815260206004820152601b60248201527f4461696c794c696d697420616c7265616479206d696772617465640000000000604482015290519081900360640190fd5b600b805460ff191660011790556114848161314c565b50565b6000600c5442111561149c5750600a5461105d565b5060095461105d565b6114ae336131eb565b6114ff576040805162461bcd60e51b815260206004820152601a60248201527f73656e646572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015290519081900360640190fd5b6115738585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815292508791508690819084018382808284376000920182905250925061324d915050565b5050505050565b6004546001600160a01b031681565b600a5490565b3330146115cf576040805162461bcd60e51b815260206004820152600960248201526827b7363c9039b2b63360b91b604482015290519081900360640190fd5b600354600160a81b900460ff166116175760405162461bcd60e51b81526004018080602001828103825260308152602001806141d26030913960400191505060405180910390fd5b806116535760405162461bcd60e51b81526004018080602001828103825260278152602001806143146027913960400191505060405180910390fd5b60065461169c576040805162461bcd60e51b815260206004820152601260248201527157686974656c69737420697320656d70747960701b604482015290519081900360640190fd5b60005b8181101561188657600560008484848181106116b757fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff1661172e576040805162461bcd60e51b815260206004820152601760248201527f41646472657373206e6f742077686974656c6973746564000000000000000000604482015290519081900360640190fd5b60006005600085858581811061174057fe5b602090810292909201356001600160a01b03168352508101919091526040016000908120805460ff1916921515929092179091555b60065461178990600163ffffffff61346316565b8110156118505783838381811061179c57fe5b905060200201356001600160a01b03166001600160a01b0316600682815481106117c257fe5b6000918252602090912001546001600160a01b03161415611848576006805460001981019081106117ef57fe5b600091825260209091200154600680546001600160a01b03909216918390811061181557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611850565b600101611775565b50600680548061185c57fe5b600082815260209020810160001990810180546001600160a01b031916905501905560010161169f565b507fd218c430fa348f4ce67791021b6b89c0c3eacd4ead1d8f5b83c60038ec28249b33838360405180846001600160a01b03166001600160a01b03168152602001806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a15050565b611911336125e7565b611958576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b600354600160a01b900460ff166119b6576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b600380546001600160a01b0319169055604080516000808252602082015281517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea5929181900390910190a1565b600f5490565b333014611a49576040805162461bcd60e51b815260206004820152600960248201526827b7363c9039b2b63360b91b604482015290519081900360640190fd5b600354600160a81b900460ff16611a915760405162461bcd60e51b815260040180806020018281038252602f81526020018061433b602f913960400191505060405180910390fd5b6001600160a01b038116611aec576040805162461bcd60e51b815260206004820152601b60248201527f3246412063616e6e6f7420626520746865203020616464726573730000000000604482015290519081900360640190fd5b6001600160a01b038116301415611b4a576040805162461bcd60e51b815260206004820181905260248201527f3246412063616e6e6f74206265207468652077616c6c65742061646472657373604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0383169081179091556003805460ff60b01b1916905560408051338152602081019290925280517f33635a1d7938fa110d60d48b4ecbefc4afcc07e782ca013f11de948ee7949d1c9281900390910190a150565b6000546001600160a01b031690565b333014611c02576040805162461bcd60e51b815260206004820152600960248201526827b7363c9039b2b63360b91b604482015290519081900360640190fd5b600354600160a81b900460ff16611c4a5760405162461bcd60e51b815260040180806020018281038252602c815260200180614282602c913960400191505060405180910390fd5b610f7682828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061279092505050565b60085490565b60015481565b6003546001600160a01b031690565b611caa336125e7565b611cf1576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b611cf96134a5565b565b611d04336125e7565b611d4b576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b600354600160b01b900460ff1615611daa576040805162461bcd60e51b815260206004820152601c60248201527f4d6f6e6f6c6974682032464120616c726561647920656e61626c656400000000604482015290519081900360640190fd5b6003805460ff60b01b1916600160b01b179055600480546001600160a01b03191690556040805133815290517fea0cce48757f6b222f91e711f59a5a8ec05a3ed3c0a4328fe36cb48f31a869699181900360200190a1565b333014611e42576040805162461bcd60e51b815260206004820152600960248201526827b7363c9039b2b63360b91b604482015290519081900360640190fd5b600354600160a81b900460ff16611e8a5760405162461bcd60e51b81526004018080602001828103825260308152602001806141a26030913960400191505060405180910390fd5b6114848161314c565b611e9e60015461269c565b6001600160a01b0316336001600160a01b031614611ef9576040805162461bcd60e51b815260206004820152601360248201527227b7363c903bb0b63632ba2232b83637bcb2b960691b604482015290519081900360640190fd5b600e5460ff1615611f51576040805162461bcd60e51b815260206004820152601d60248201527f4f776e65727368697020616c7265616479207472616e73666572726564000000604482015290519081900360640190fd5b600e805460ff19166001179055610f7682826134ed565b611f71336125e7565b80611f7b57503330145b611fc1576040805162461bcd60e51b815260206004820152601260248201527127b7363c9037bbb732b91037b91039b2b63360711b604482015290519081900360640190fd5b8080611ffe576040805162461bcd60e51b8152602060048201526007602482015266076616c75653d360cc1b604482015290519081900360640190fd5b6001600160a01b038416612049576040805162461bcd60e51b815260206004820152600d60248201526c064657374696e6174696f6e3d3609c1b604482015290519081900360640190fd5b6001600160a01b03841660009081526005602052604090205460ff1615801561207c5750600354600160a81b900460ff16155b1561209a57600061208d8484612277565b905061209881612aa1565b505b6120a58484846136a4565b604080516001600160a01b0380871682528516602082015280820184905290517fd1ba4ac2e2a11b5101f6cb4d978f514a155b421e8ec396d2d9abaf0bb02917ee9181900360600190a150505050565b600354600160b01b900460ff161561215a57612110336131eb565b612155576040805162461bcd60e51b81526020600482015260116024820152704f6e6c79204d6f6e6f6c6974682032464160781b604482015290519081900360640190fd5b6121ad565b6004546001600160a01b031633146121ad576040805162461bcd60e51b81526020600482015260116024820152704f6e6c7920706572736f6e616c2032464160781b604482015290519081900360640190fd5b6115738585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815292508791508690819084018382808284376000920191909152506001925061324d915050565b600d5481565b600354600160a81b900460ff1681565b600354600160b01b900460ff1681565b6006818154811061225757fe5b6000918252602090912001546001600160a01b0316905081565b60025490565b60006122816136ea565b6001600160a01b0316836001600160a01b031614156122a1575080610ce4565b816001600160a01b0384161561233c5760008060006122bf87613760565b50505093509350935050806122db576000945050505050610ce4565b81612316576040805162461bcd60e51b81526020600482015260066024820152650726174653d360d41b604482015290519081900360640190fd5b6123368361232a888563ffffffff6138f216565b9063ffffffff61394b16565b93505050505b600080600061234961398d565b505050935093509350508061239b576040805162461bcd60e51b8152602060048201526013602482015272746f6b656e206e6f7420617661696c61626c6560681b604482015290519081900360640190fd5b816123e1576040805162461bcd60e51b81526020600482015260116024820152700737461626c65636f696e20726174653d3607c1b604482015290519081900360640190fd5b6123f58261232a868663ffffffff6138f216565b979650505050505050565b60008151604114612458576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156124c95760405162461bcd60e51b81526004018080602001828103825260228152602001806142606022913960400191505060405180910390fd5b8060ff16601b141580156124e157508060ff16601c14155b1561251d5760405162461bcd60e51b81526004018080602001828103825260228152602001806142d16022913960400191505060405180910390fd5b60408051600080825260208083018085528a905260ff85168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa158015612575573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166125dd576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b6003546001600160a01b0390811691161490565b60006001600160a01b0382161561269557816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561266257600080fd5b505afa158015612676573d6000803e3d6000fd5b505050506040513d602081101561268c57600080fd5b50519050610ce4565b5047610ce4565b6000805460408051630178b8bf60e01b81526004810185905290516001600160a01b0390921691630178b8bf91602480820192602092909190829003018186803b1580156126e957600080fd5b505afa1580156126fd573d6000803e3d6000fd5b505050506040513d602081101561271357600080fd5b505160408051631d9dabef60e11b81526004810185905290516001600160a01b0390921691633b3b57de91602480820192602092909190829003018186803b15801561275e57600080fd5b505afa158015612772573d6000803e3d6000fd5b505050506040513d602081101561278857600080fd5b505192915050565b8060005b815181101561287c576127b98282815181106127ac57fe5b60200260200101516125e7565b15612804576040805162461bcd60e51b8152602060048201526016602482015275436f6e7461696e73206f776e6572206164647265737360501b604482015290519081900360640190fd5b60006001600160a01b031682828151811061281b57fe5b60200260200101516001600160a01b03161415612874576040805162461bcd60e51b8152602060048201526012602482015271436f6e7461696e732030206164647265737360701b604482015290519081900360640190fd5b600101612794565b5081516128ba5760405162461bcd60e51b81526004018080602001828103825260238152602001806142ae6023913960400191505060405180910390fd5b60005b82518110156129f357600560008483815181106128d657fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161561294f576040805162461bcd60e51b815260206004820152601b60248201527f4164647265737320616c72656164792077686974656c69737465640000000000604482015290519081900360640190fd5b60016005600085848151811061296157fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060068382815181106129ae57fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155016128bd565b507fb2f6cccee7a369e23e293c25aa19bef80af11eb26deba3ea0f2a02783f752e4a338360405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612a6f578181015183820152602001612a57565b50505050905001935050505060405180910390a15050565b600080612a9383613760565b509098975050505050505050565b600c54421115612ac857600a54600955612ac4426201518063ffffffff613afc16565b600c555b806009541015612b095760405162461bcd60e51b81526004018080602001828103825260248152602001806142026024913960400191505060405180910390fd5b600954612b1c908263ffffffff61346316565b6009819055600c5460408051928352602083019190915280517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca9281900390910190a150565b801580612be8575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015612bba57600080fd5b505afa158015612bce573d6000803e3d6000fd5b505050506040513d6020811015612be457600080fd5b5051155b612c235760405162461bcd60e51b81526004018080602001828103825260368152602001806143b76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612c75908490613b56565b505050565b6001600160a01b03831660009081526005602052604090205460609060ff16158015612cb05750600354600160a81b900460ff16155b15612ccf576000612cc2600085612277565b9050612ccd81612aa1565b505b612ce1846001600160a01b0316613d14565b8015612cf15750612cf184613d50565b15612ee857600080612d038685613d6a565b6001600160a01b038216600090815260056020526040902054919350915060ff16158015612d3b5750600354600160a81b900460ff16155b15612d59576000612d4c8783612277565b9050612d5781612aa1565b505b612d726001600160a01b0387168563ffffffff613b5616565b604080516020808252818301909252606091602082018180368337019050509050600160f81b81601f81518110612da557fe5b60200101906001600160f81b031916908160001a9053507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138787878460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015612e40578181015183820152602001612e28565b50505050905090810190601f168015612e6d5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612ea0578181015183820152602001612e88565b50505050905090810190601f168015612ecd5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19250613145915050565b60006060856001600160a01b031685856040518082805190602001908083835b60208310612f275780518252601f199092019160209182019101612f08565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f89576040519150601f19603f3d011682016040523d82523d6000602084013e612f8e565b606091505b509150915081819061301e5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fe3578181015183820152602001612fcb565b50505050905090810190601f1680156130105780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b507ff77753fab406ecfff96d6ff2476c64a838fa9f6d37b1bf190f8546e395e3b6138686868460405180856001600160a01b03166001600160a01b031681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b838110156130a357818101518382015260200161308b565b50505050905090810190601f1680156130d05780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156131035781810151838201526020016130eb565b50505050905090810190601f1680156131305780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a19150505b9392505050565b600a819055604080513381526020810183905281517f2a843f39f13315c4c1a9bc53a1a32162858f272f3b2d0c656f409431251b6768929181900390910190a160098190556131a4426201518063ffffffff613afc16565b600c81905560095460408051918252602082019290925281517fb8d7171194501073e2d8151eeccf1398143c5df9acfb9868d0539a256164f6ca929181900390910190a150565b60006131f860025461269c565b6001600160a01b031663b429afeb836040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561275e57600080fd5b60006132dc858560405160200180806339363c1d60e11b81525060040183815260200182805190602001908083835b6020831061329b5780518252601f19909201916020918201910161327c565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120613e74565b9050630b135d3f60e11b6132f08285610c7c565b6001600160e01b0319161461333c576040805162461bcd60e51b815260206004820152600d60248201526c1cda59c81b9bdd081d985b1a59609a1b604482015290519081900360640190fd5b600d54851461337e576040805162461bcd60e51b81526020600482015260096024820152687478207265706c617960b81b604482015290519081900360640190fd5b6133866134a5565b6003805460ff60a81b1916600160a81b841515021790556133a684613ec5565b6003805460ff60a81b191690556040805183151560208083019190915282825286519282019290925285517f1e67acdbe17d73f10c3c1cec8dba9c0bca6d8fcd7f326d2a00e6520026b21585928792869290918291606083019186019080838360005b83811015613421578181015183820152602001613409565b50505050905090810190601f16801561344e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050505050565b600061314583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613fab565b600d80546001019081905560408051338152602081019290925280517fab0423a75986556234aecd171c46ce7f5e45607d8070bf5230f2735b50322bff9281900390910190a1565b6134f6336125e7565b61353d576040805162461bcd60e51b815260206004820152601360248201527239b2b73232b91034b9903737ba1037bbb732b960691b604482015290519081900360640190fd5b600354600160a01b900460ff1661359b576040805162461bcd60e51b815260206004820152601d60248201527f6f776e657273686970206973206e6f74207472616e7366657261626c65000000604482015290519081900360640190fd5b6001600160a01b0382166135e05760405162461bcd60e51b815260040180806020018281038252602381526020018061436a6023913960400191505060405180910390fd5b6003805460ff60a01b1916600160a01b831515021790558061363957604080516001600160a01b038416815290517f808639ff9c8e4732d60b6c2330de498035416d229f27a77d259680895efec1229181900360200190a15b600354604080516001600160a01b039283168152918416602083015280517f850b3df64837d7d518b45f5aa64d104652c3b80eb5b34a8e3d9eb666cb7cdea59281900390910190a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166136d0576136cb6001600160a01b0384168263ffffffff61400516565b612c75565b612c756001600160a01b038316848363ffffffff6140ea16565b60006136f760085461269c565b6001600160a01b031663e9cbd8226040518163ffffffff1660e01b815260040160206040518083038186803b15801561372f57600080fd5b505afa158015613743573d6000803e3d6000fd5b505050506040513d602081101561375957600080fd5b5051905090565b606060008060008060008061377660085461269c565b6001600160a01b0316631f69565f896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060006040518083038186803b1580156137cb57600080fd5b505afa1580156137df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561380857600080fd5b8101908080516040519392919084600160201b82111561382757600080fd5b90830190602082018581111561383c57600080fd5b8251600160201b81118282018810171561385557600080fd5b82525081516020918201929091019080838360005b8381101561388257818101518382015260200161386a565b50505050905090810190601f1680156138af5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979e50929c50909a509850965094509192505050919395979092949650565b60008261390157506000610ce4565b8282028284828161390e57fe5b04146131455760405162461bcd60e51b81526004018080602001828103825260218152602001806142f36021913960400191505060405180910390fd5b600061314583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061413c565b60606000806000806000806139a360085461269c565b6001600160a01b0316633efec5e96040518163ffffffff1660e01b815260040160006040518083038186803b1580156139db57600080fd5b505afa1580156139ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015613a1857600080fd5b8101908080516040519392919084600160201b821115613a3757600080fd5b908301906020820185811115613a4c57600080fd5b8251600160201b811182820188101715613a6557600080fd5b82525081516020918201929091019080838360005b83811015613a92578181015183820152602001613a7a565b50505050905090810190601f168015613abf5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c090950151979f939e50919c509a5098509096509294509192505050565b600082820183811015613145576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b613b68826001600160a01b0316613d14565b613bb9576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310613bf75780518252601f199092019160209182019101613bd8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613c59576040519150601f19603f3d011682016040523d82523d6000602084013e613c5e565b606091505b509150915081613cb5576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115613d0e57808060200190516020811015613cd157600080fd5b5051613d0e5760405162461bcd60e51b815260040180806020018281038252602a81526020018061438d602a913960400191505060405180910390fd5b50505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613d4857508115155b949350505050565b600080613d5c83613760565b509198975050505050505050565b600080613d7860085461269c565b6001600160a01b031663afc72e9385856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613dec578181015183820152602001613dd4565b50505050905090810190601f168015613e195780820380516001836020036101000a031916815260200191505b509350505050604080518083038186803b158015613e3657600080fd5b505afa158015613e4a573d6000803e3d6000fd5b505050506040513d6040811015613e6057600080fd5b508051602090910151909590945092505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b8051602080820191906000808060605b86851015613fa157613eee86605463ffffffff61346316565b888601805160148201516034909201805193995060609190911c96509094509092509050613f336054613f27878563ffffffff613afc16565b9063ffffffff613afc16565b945086851115613f7a576040805162461bcd60e51b815260206004820152600d60248201526c6f7574206f6620626f756e647360981b604482015290519081900360640190fd5b81613f9057506040805160208101909152600081525b613f9b848483612c7a565b50613ed5565b5050505050505050565b60008184841115613ffd5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612fe3578181015183820152602001612fcb565b505050900390565b8047101561405a576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d80600081146140a5576040519150601f19603f3d011682016040523d82523d6000602084013e6140aa565b606091505b5050905080612c755760405162461bcd60e51b815260040180806020018281038252603a815260200180614226603a913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612c75908490613b56565b6000818361418b5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612fe3578181015183820152602001612fcb565b50600083858161419757fe5b049594505050505056fe53657474696e6720746865206461696c79206c696d69742072657175697265732070726976696c65676564206d6f646552656d6f76696e672066726f6d2077686974656c6973742072657175697265732070726976696c65676564206d6f64655370656e6420616d6f756e74206578636565647320617661696c61626c65206c696d6974416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d6179206861766520726576657274656445434453413a20696e76616c6964207369676e6174757265202773272076616c7565416464696e6720746f2077686974656c6973742072657175697265732070726976696c65676564206d6f6465456d707479206c69737420746f20626520616464656420746f2077686974656c69737445434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77456d707479206c69737420746f2062652072656d6f7665642066726f6d2077686974656c69737453657474696e67206120706572736f6e616c203246412072657175697265732070726976696c65676564206d6f64656f776e65722063616e6e6f742062652073657420746f207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212201dff496da20113997a1999e2c7fc7ab54ccd7c376b869fd254b7dfa70bcab80e64736f6c63430006040033a2646970667358221220e43b47ac266b3e6e5b2c1440e76849216786e387c12125731d314ccb7e5e537164736f6c63430006040033"

// DeployWalletCache deploys a new Ethereum contract, binding an instance of WalletCache to it.
func DeployWalletCache(auth *bind.TransactOpts, backend bind.ContractBackend, _ens_ common.Address, _defaultDailyLimit_ *big.Int, _controllerNode_ [32]byte, _licenceNode_ [32]byte, _tokenWhitelistNode_ [32]byte, _walletDeployerNode_ [32]byte) (common.Address, *types.Transaction, *WalletCache, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(WalletCacheBin), backend, _ens_, _defaultDailyLimit_, _controllerNode_, _licenceNode_, _tokenWhitelistNode_, _walletDeployerNode_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// WalletCache is an auto generated Go binding around an Ethereum contract.
type WalletCache struct {
	WalletCacheCaller     // Read-only binding to the contract
	WalletCacheTransactor // Write-only binding to the contract
	WalletCacheFilterer   // Log filterer for contract events
}

// WalletCacheCaller is an auto generated read-only Go binding around an Ethereum contract.
type WalletCacheCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WalletCacheTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WalletCacheFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WalletCacheSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WalletCacheSession struct {
	Contract     *WalletCache      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WalletCacheCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WalletCacheCallerSession struct {
	Contract *WalletCacheCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// WalletCacheTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WalletCacheTransactorSession struct {
	Contract     *WalletCacheTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// WalletCacheRaw is an auto generated low-level Go binding around an Ethereum contract.
type WalletCacheRaw struct {
	Contract *WalletCache // Generic contract binding to access the raw methods on
}

// WalletCacheCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WalletCacheCallerRaw struct {
	Contract *WalletCacheCaller // Generic read-only contract binding to access the raw methods on
}

// WalletCacheTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WalletCacheTransactorRaw struct {
	Contract *WalletCacheTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWalletCache creates a new instance of WalletCache, bound to a specific deployed contract.
func NewWalletCache(address common.Address, backend bind.ContractBackend) (*WalletCache, error) {
	contract, err := bindWalletCache(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WalletCache{WalletCacheCaller: WalletCacheCaller{contract: contract}, WalletCacheTransactor: WalletCacheTransactor{contract: contract}, WalletCacheFilterer: WalletCacheFilterer{contract: contract}}, nil
}

// NewWalletCacheCaller creates a new read-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheCaller(address common.Address, caller bind.ContractCaller) (*WalletCacheCaller, error) {
	contract, err := bindWalletCache(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheCaller{contract: contract}, nil
}

// NewWalletCacheTransactor creates a new write-only instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheTransactor(address common.Address, transactor bind.ContractTransactor) (*WalletCacheTransactor, error) {
	contract, err := bindWalletCache(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WalletCacheTransactor{contract: contract}, nil
}

// NewWalletCacheFilterer creates a new log filterer instance of WalletCache, bound to a specific deployed contract.
func NewWalletCacheFilterer(address common.Address, filterer bind.ContractFilterer) (*WalletCacheFilterer, error) {
	contract, err := bindWalletCache(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WalletCacheFilterer{contract: contract}, nil
}

// bindWalletCache binds a generic wrapper to an already deployed contract.
func bindWalletCache(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WalletCacheABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.WalletCacheCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCacheTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WalletCache *WalletCacheCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _WalletCache.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WalletCache *WalletCacheTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WalletCache *WalletCacheTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WalletCache.Contract.contract.Transact(opts, method, params...)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCaller) CachedWallets(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWallets", arg0)
	return *ret0, err
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWallets is a free data retrieval call binding the contract method 0xfc6cabe7.
//
// Solidity: function cachedWallets(uint256 ) constant returns(address)
func (_WalletCache *WalletCacheCallerSession) CachedWallets(arg0 *big.Int) (common.Address, error) {
	return _WalletCache.Contract.CachedWallets(&_WalletCache.CallOpts, arg0)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) CachedWalletsCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "cachedWalletsCount")
	return *ret0, err
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// CachedWalletsCount is a free data retrieval call binding the contract method 0x71b9076a.
//
// Solidity: function cachedWalletsCount() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) CachedWalletsCount() (*big.Int, error) {
	return _WalletCache.Contract.CachedWalletsCount(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) ControllerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "controllerNode")
	return *ret0, err
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// ControllerNode is a free data retrieval call binding the contract method 0xe2b4ce97.
//
// Solidity: function controllerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) ControllerNode() ([32]byte, error) {
	return _WalletCache.Contract.ControllerNode(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCaller) DefaultDailyLimit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "defaultDailyLimit")
	return *ret0, err
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// DefaultDailyLimit is a free data retrieval call binding the contract method 0xc76b0888.
//
// Solidity: function defaultDailyLimit() constant returns(uint256)
func (_WalletCache *WalletCacheCallerSession) DefaultDailyLimit() (*big.Int, error) {
	return _WalletCache.Contract.DefaultDailyLimit(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCaller) Ens(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ens")
	return *ret0, err
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// Ens is a free data retrieval call binding the contract method 0x3f15457f.
//
// Solidity: function ens() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) Ens() (common.Address, error) {
	return _WalletCache.Contract.Ens(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCaller) EnsRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "ensRegistry")
	return *ret0, err
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// EnsRegistry is a free data retrieval call binding the contract method 0x7d73b231.
//
// Solidity: function ensRegistry() constant returns(address)
func (_WalletCache *WalletCacheCallerSession) EnsRegistry() (common.Address, error) {
	return _WalletCache.Contract.EnsRegistry(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) LicenceNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "licenceNode")
	return *ret0, err
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// LicenceNode is a free data retrieval call binding the contract method 0x747c31d6.
//
// Solidity: function licenceNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) LicenceNode() ([32]byte, error) {
	return _WalletCache.Contract.LicenceNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) TokenWhitelistNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "tokenWhitelistNode")
	return *ret0, err
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// TokenWhitelistNode is a free data retrieval call binding the contract method 0x877337b0.
//
// Solidity: function tokenWhitelistNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) TokenWhitelistNode() ([32]byte, error) {
	return _WalletCache.Contract.TokenWhitelistNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCaller) WalletDeployerNode(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _WalletCache.contract.Call(opts, out, "walletDeployerNode")
	return *ret0, err
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// WalletDeployerNode is a free data retrieval call binding the contract method 0x87e8bed1.
//
// Solidity: function walletDeployerNode() constant returns(bytes32)
func (_WalletCache *WalletCacheCallerSession) WalletDeployerNode() ([32]byte, error) {
	return _WalletCache.Contract.WalletDeployerNode(&_WalletCache.CallOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactor) CacheWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "cacheWallet")
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// CacheWallet is a paid mutator transaction binding the contract method 0x60dbc5de.
//
// Solidity: function cacheWallet() returns()
func (_WalletCache *WalletCacheTransactorSession) CacheWallet() (*types.Transaction, error) {
	return _WalletCache.Contract.CacheWallet(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactor) WalletCachePop(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WalletCache.contract.Transact(opts, "walletCachePop")
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCachePop is a paid mutator transaction binding the contract method 0xa4570e51.
//
// Solidity: function walletCachePop() returns(address)
func (_WalletCache *WalletCacheTransactorSession) WalletCachePop() (*types.Transaction, error) {
	return _WalletCache.Contract.WalletCachePop(&_WalletCache.TransactOpts)
}

// WalletCacheCachedWalletIterator is returned from FilterCachedWallet and is used to iterate over the raw logs and unpacked data for CachedWallet events raised by the WalletCache contract.
type WalletCacheCachedWalletIterator struct {
	Event *WalletCacheCachedWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WalletCacheCachedWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WalletCacheCachedWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WalletCacheCachedWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WalletCacheCachedWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WalletCacheCachedWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WalletCacheCachedWallet represents a CachedWallet event raised by the WalletCache contract.
type WalletCacheCachedWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCachedWallet is a free log retrieval operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) FilterCachedWallet(opts *bind.FilterOpts) (*WalletCacheCachedWalletIterator, error) {

	logs, sub, err := _WalletCache.contract.FilterLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return &WalletCacheCachedWalletIterator{contract: _WalletCache.contract, event: "CachedWallet", logs: logs, sub: sub}, nil
}

// WatchCachedWallet is a free log subscription operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) WatchCachedWallet(opts *bind.WatchOpts, sink chan<- *WalletCacheCachedWallet) (event.Subscription, error) {

	logs, sub, err := _WalletCache.contract.WatchLogs(opts, "CachedWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WalletCacheCachedWallet)
				if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCachedWallet is a log parse operation binding the contract event 0x9ede7876a6b2454072ceeaff4b6b4e6eaa5381db241b850f2a46034136fc2e6e.
//
// Solidity: event CachedWallet(address _wallet)
func (_WalletCache *WalletCacheFilterer) ParseCachedWallet(log types.Log) (*WalletCacheCachedWallet, error) {
	event := new(WalletCacheCachedWallet)
	if err := _WalletCache.contract.UnpackLog(event, "CachedWallet", log); err != nil {
		return nil, err
	}
	return event, nil
}
